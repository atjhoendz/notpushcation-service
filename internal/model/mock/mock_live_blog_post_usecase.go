// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atjhoendz/notpushcation-service/internal/model (interfaces: LiveBlogPostUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/atjhoendz/notpushcation-service/internal/model"
	gomock "github.com/golang/mock/gomock"
	ferstream "github.com/kumparan/ferstream"
)

// MockLiveBlogPostUsecase is a mock of LiveBlogPostUsecase interface.
type MockLiveBlogPostUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLiveBlogPostUsecaseMockRecorder
}

// MockLiveBlogPostUsecaseMockRecorder is the mock recorder for MockLiveBlogPostUsecase.
type MockLiveBlogPostUsecaseMockRecorder struct {
	mock *MockLiveBlogPostUsecase
}

// NewMockLiveBlogPostUsecase creates a new mock instance.
func NewMockLiveBlogPostUsecase(ctrl *gomock.Controller) *MockLiveBlogPostUsecase {
	mock := &MockLiveBlogPostUsecase{ctrl: ctrl}
	mock.recorder = &MockLiveBlogPostUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiveBlogPostUsecase) EXPECT() *MockLiveBlogPostUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLiveBlogPostUsecase) Create(arg0 model.CreateLiveBlogPostInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", arg0)
}

// Create indicates an expected call of Create.
func (mr *MockLiveBlogPostUsecaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLiveBlogPostUsecase)(nil).Create), arg0)
}

// HandleEvent mocks base method.
func (m *MockLiveBlogPostUsecase) HandleEvent(arg0 model.CreateLiveBlogPostInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleEvent", arg0)
}

// HandleEvent indicates an expected call of HandleEvent.
func (mr *MockLiveBlogPostUsecaseMockRecorder) HandleEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleEvent", reflect.TypeOf((*MockLiveBlogPostUsecase)(nil).HandleEvent), arg0)
}

// RegisterNATSJetStream mocks base method.
func (m *MockLiveBlogPostUsecase) RegisterNATSJetStream(arg0 ferstream.JetStream) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterNATSJetStream", arg0)
}

// RegisterNATSJetStream indicates an expected call of RegisterNATSJetStream.
func (mr *MockLiveBlogPostUsecaseMockRecorder) RegisterNATSJetStream(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNATSJetStream", reflect.TypeOf((*MockLiveBlogPostUsecase)(nil).RegisterNATSJetStream), arg0)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atjhoendz/notpushcation-service/internal/model (interfaces: OnesignalClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/atjhoendz/notpushcation-service/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockOnesignalClient is a mock of OnesignalClient interface.
type MockOnesignalClient struct {
	ctrl     *gomock.Controller
	recorder *MockOnesignalClientMockRecorder
}

// MockOnesignalClientMockRecorder is the mock recorder for MockOnesignalClient.
type MockOnesignalClientMockRecorder struct {
	mock *MockOnesignalClient
}

// NewMockOnesignalClient creates a new mock instance.
func NewMockOnesignalClient(ctrl *gomock.Controller) *MockOnesignalClient {
	mock := &MockOnesignalClient{ctrl: ctrl}
	mock.recorder = &MockOnesignalClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOnesignalClient) EXPECT() *MockOnesignalClientMockRecorder {
	return m.recorder
}

// Deliver mocks base method.
func (m *MockOnesignalClient) Deliver(arg0 context.Context, arg1 *model.OnesignalPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deliver", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deliver indicates an expected call of Deliver.
func (mr *MockOnesignalClientMockRecorder) Deliver(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deliver", reflect.TypeOf((*MockOnesignalClient)(nil).Deliver), arg0, arg1)
}

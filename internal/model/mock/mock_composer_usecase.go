// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atjhoendz/notpushcation-service/internal/model (interfaces: ComposerUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/atjhoendz/notpushcation-service/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockComposerUsecase is a mock of ComposerUsecase interface.
type MockComposerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockComposerUsecaseMockRecorder
}

// MockComposerUsecaseMockRecorder is the mock recorder for MockComposerUsecase.
type MockComposerUsecaseMockRecorder struct {
	mock *MockComposerUsecase
}

// NewMockComposerUsecase creates a new mock instance.
func NewMockComposerUsecase(ctrl *gomock.Controller) *MockComposerUsecase {
	mock := &MockComposerUsecase{ctrl: ctrl}
	mock.recorder = &MockComposerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComposerUsecase) EXPECT() *MockComposerUsecaseMockRecorder {
	return m.recorder
}

// Compose mocks base method.
func (m *MockComposerUsecase) Compose(arg0 context.Context, arg1 model.PushNotificationInput) (*model.OnesignalPayload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Compose", arg0, arg1)
	ret0, _ := ret[0].(*model.OnesignalPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Compose indicates an expected call of Compose.
func (mr *MockComposerUsecaseMockRecorder) Compose(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Compose", reflect.TypeOf((*MockComposerUsecase)(nil).Compose), arg0, arg1)
}

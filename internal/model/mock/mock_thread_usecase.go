// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atjhoendz/notpushcation-service/internal/model (interfaces: ThreadUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/atjhoendz/notpushcation-service/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockThreadUsecase is a mock of ThreadUsecase interface.
type MockThreadUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockThreadUsecaseMockRecorder
}

// MockThreadUsecaseMockRecorder is the mock recorder for MockThreadUsecase.
type MockThreadUsecaseMockRecorder struct {
	mock *MockThreadUsecase
}

// NewMockThreadUsecase creates a new mock instance.
func NewMockThreadUsecase(ctrl *gomock.Controller) *MockThreadUsecase {
	mock := &MockThreadUsecase{ctrl: ctrl}
	mock.recorder = &MockThreadUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThreadUsecase) EXPECT() *MockThreadUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockThreadUsecase) Create(arg0 context.Context, arg1 model.CreateThreadInput) (*model.Thread, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*model.Thread)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockThreadUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockThreadUsecase)(nil).Create), arg0, arg1)
}

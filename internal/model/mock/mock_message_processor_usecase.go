// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atjhoendz/notpushcation-service/internal/model (interfaces: MessageProcessorUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/atjhoendz/notpushcation-service/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMessageProcessorUsecase is a mock of MessageProcessorUsecase interface.
type MockMessageProcessorUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMessageProcessorUsecaseMockRecorder
}

// MockMessageProcessorUsecaseMockRecorder is the mock recorder for MockMessageProcessorUsecase.
type MockMessageProcessorUsecaseMockRecorder struct {
	mock *MockMessageProcessorUsecase
}

// NewMockMessageProcessorUsecase creates a new mock instance.
func NewMockMessageProcessorUsecase(ctrl *gomock.Controller) *MockMessageProcessorUsecase {
	mock := &MockMessageProcessorUsecase{ctrl: ctrl}
	mock.recorder = &MockMessageProcessorUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageProcessorUsecase) EXPECT() *MockMessageProcessorUsecaseMockRecorder {
	return m.recorder
}

// ProcessNotificationMessage mocks base method.
func (m *MockMessageProcessorUsecase) ProcessNotificationMessage(arg0 context.Context, arg1 model.PushNotificationInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessNotificationMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProcessNotificationMessage indicates an expected call of ProcessNotificationMessage.
func (mr *MockMessageProcessorUsecaseMockRecorder) ProcessNotificationMessage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessNotificationMessage", reflect.TypeOf((*MockMessageProcessorUsecase)(nil).ProcessNotificationMessage), arg0, arg1)
}
